/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 sofa.glb
*/

import React, { useEffect, useRef } from "react";
import { useGLTF, useTexture } from "@react-three/drei";

import * as THREE from "three";
import { useCustomization } from "../contexts/Customization";

 

const Sofa = (props) => {

  const {material, sofaColor,cushionColor } = useCustomization();

  const { nodes, materials } = useGLTF('./model/sofa.glb')

  const leatherTextureProps = useTexture({
     //map: "./textures/leather/Leather_008_Base Color.jpg",
    normalMap: "./textures/leather/Leather_008_Normal.jpg",
    roughnessMap: "./textures/leather/Leather_008_Roughness.jpg",
    aoMap: "./textures/leather/Leather_008_Ambient Occlusion.jpg",
  });

  const leather1TextureProps = useTexture({
    // map: "./textures/leather1/Leather_Padded_001_basecolor.jpg",
    normalMap: "./textures/leather1/Leather_Padded_001_normal.jpg",
    roughnessMap: "./textures/leather1/Leather_Padded_001_roughness.jpg",
    aoMap: "./textures/leather1/Leather_Padded_001_ambientOcclusion.jpg",
  });

  const fabricTextureProps = useTexture({
   //  map: "./textures/fabric/Fabric_Knitted_006_basecolor.jpg",
    normalMap: "./textures/fabric/Fabric_Knitted_006_normal.jpg",
    roughnessMap: "./textures/fabric/Fabric_Knitted_006_roughness.jpg",
    aoMap: "./textures/fabric/Fabric_Knitted_006_ambientOcclusion.jpg",
  });

  //leatherTextureProps.map.repeat.set(3, 3);
  leatherTextureProps.normalMap.repeat.set(3, 3);
  leatherTextureProps.roughnessMap.repeat.set(3, 3);
  leatherTextureProps.aoMap.repeat.set(3, 3);
  //leatherTextureProps.map.wrapS = leatherTextureProps.map.wrapT =
 //  THREE.MirroredRepeatWrapping;
  leatherTextureProps.normalMap.wrapS = leatherTextureProps.normalMap.wrapT =
    THREE.MirroredRepeatWrapping;
  leatherTextureProps.roughnessMap.wrapS =
    leatherTextureProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  leatherTextureProps.aoMap.wrapS = leatherTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

 /* leather1TextureProps.map.repeat.set(3, 3);
  leather1TextureProps.normalMap.repeat.set(3, 3);
  leather1TextureProps.roughnessMap.repeat.set(3, 3);
  leather1TextureProps.aoMap.repeat.set(3, 3);
  leather1TextureProps.map.wrapS = leather1TextureProps.map.wrapT =
   THREE.MirroredRepeatWrapping;
  leather1TextureProps.normalMap.wrapS = leather1TextureProps.normalMap.wrapT =
    THREE.MirroredRepeatWrapping;
  leather1TextureProps.roughnessMap.wrapS =
    leather1TextureProps.roughnessMap.wrapT = THREE.MirroredRepeatWrapping;
  leather1TextureProps.aoMap.wrapS = leather1TextureProps.aoMap.wrapT =
    THREE.RepeatWrapping; */

  //fabricTextureProps.map.repeat.set(3, 3);
  fabricTextureProps.normalMap.repeat.set(3, 3);
  fabricTextureProps.roughnessMap.repeat.set(3, 3);
  fabricTextureProps.aoMap.repeat.set(3, 3);
  //fabricTextureProps.map.wrapS = fabricTextureProps.map.wrapT =
  //THREE.RepeatWrapping;
  fabricTextureProps.normalMap.wrapS = fabricTextureProps.normalMap.wrapT =
    THREE.RepeatWrapping;
  fabricTextureProps.roughnessMap.wrapS =
    fabricTextureProps.roughnessMap.wrapT = THREE.RepeatWrapping;
  fabricTextureProps.aoMap.wrapS = fabricTextureProps.aoMap.wrapT =
    THREE.RepeatWrapping;

  return (
    <group {...props} dispose={null}>
      <group position={[0.04, 0.5, 0]} rotation={[-Math.PI / 2, 0, 0]}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          <mesh geometry={nodes.base.geometry} >
          <meshStandardMaterial
          {...(material === "leather" ? leatherTextureProps : fabricTextureProps)}
          color={sofaColor.color}
           />
      
          </mesh>
          <mesh geometry={nodes.cushion_seat.geometry} >
          <meshStandardMaterial
          {...fabricTextureProps}
          color = {cushionColor.color}
          />
          </mesh>
          <mesh geometry={nodes.cushion_seat001.geometry} >
          <meshStandardMaterial
          {...fabricTextureProps}
          color={cushionColor.color}
                    />
          </mesh>
          <mesh geometry={nodes.leg.geometry} material={materials['1001']} />
          <mesh geometry={nodes.pillow_cushion.geometry} >
          <meshStandardMaterial
          {...fabricTextureProps}
          color={cushionColor.color} 
                   />
          </mesh>

          <mesh geometry={nodes.side.geometry} >
          <meshStandardMaterial
          {...(material === "leather" ? leatherTextureProps : fabricTextureProps)}

          color={sofaColor.color}
           />
          </mesh>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('./model/sofa.glb')

export default Sofa;
